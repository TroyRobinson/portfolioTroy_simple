---
description: When styling elements, using/updating themes, or building components or screens.
globs: 
alwaysApply: false
---
# Styling elements or components
- Use inline style props e.g. style={{...}} for styling. No styles via other JS props, no JS object for CSS, or CSS files (except for global app.js & globals.css for certain cases -- see their comments).
- Styles should be localized as much as possible to the component level as components will be used throughout the app for the design system proliferation.
- Control spacing between elements using padding (in 8px increments, or 4px increments if a compact area).
- Internal text spacing is controlled by the global line-height reset in app.jsx.
- U

# Global styles (app.jsx only)
- Only use global CSS for:
  - Browser resets (margins, padding, box-sizing)
  - Brand accent colors (CSS variables)
  - Base text rendering settings
- Avoid putting layout constraints (widths, heights) in global styles
- Global styles should focus on normalization, not layout decisions

# Layout principles
- Size & spacing in 8px increments
- Component width constraints:
  - Define min/max widths at component level
  - Use pixels for explicit constraints
- Padding for spacing between elements
- Margin only if padding doesn't suffice.

# Theme 
- Generally develop the theme of the app via component primatives.
- Pull brand accent colors from app.jsx
- Size & spacing in 8px increments, or 4px increments if a compact area.
- Use the global line-height setting in app.jsx for consistent text spacing.

# 